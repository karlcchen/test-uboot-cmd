#
# test re-booting u-boot/linux, boot from 'usb drive'
#
# Note:use "$?", "${?}" is not the same as "$?", which is ususally undefined and return null   
#
env default -f -a
saveenv  

# === bugfix_params, for Anderson-Peak only, added 'cpuidle.off=1'
#@ IF_board_name AndersonPeak setenv bugfix_params 'cpuidle.off=1'

setenv usb_boot_dev 0
# IF_board_name CastlePeak setenv usb_boot_dev 2

# === extra_params
setenv extra_params "pci=pcie_bus_safe ${bugfix_params}"
pri extra_params
# === scx_params
setenv scx_params 'root=LABEL=A rw rootwait'

# === init network 
# === test ping 
setenv test-ping 'ping ${serverip}'
setenv init_network 'setenv ipaddr 192.168.168.168; setenv serverip 192.168.168.250; run switch_init; run test-ping'
#@ IF_board_name AndersonPeak    setenv ipaddr 192.168.168.167
#@ IF_board_name CastlePeak      setenv ipaddr 192.168.168.166
#@ IF_board_name MountRitter     setenv ipaddr 192.168.168.165
#@ IF_board_name BirchMountain   setenv ipaddr 192.168.168.164
#@ IF_board_name BearMountain    setenv ipaddr 192.168.168.163
#@ IF_board_name PalomaMountain  setenv ipaddr 192.168.168.162
#@ IF_board_name MammothMountain setenv ipaddr 192.168.168.161
#@ IF_board_name LomaPrieta      setenv ipaddr 192.168.168.160

# === scx_boot_usb
setenv scx_boot_usb 'usb stop;sleep 3;usb start;run switch_init;run scx_boot_params;fatload usb ${usb_boot_dev} ${loadaddr} ${fitname};if itest $? -eq 0;then bootm ${loadaddr};fi'

# === inc_test_loop, note SETEXPR treat number as HexaDecimal 
# === inc_test_loop
# === inc_test_loop_save
setenv init_test_loop 'setenv test_loop 0 ; setenv test_loop_end 9999999; saveenv; echo test_loop=${test_loop}, test_loop_end=${test_loop_end}'
setenv inc_test_loop 'setexpr.l test_loop ${test_loop} + 1'
setenv inc_test_loop_save 'run inc_test_loop; saveenv'

# === system_info 
# === test_info 
setenv system_info 'ver; sysinfo; boardinfo get irv; boardinfo get desc'
setenv test_info 'echo; echo "### test_loop=0x${test_loop}; test_loop_end=0x${test_loop_end} ###"; echo; run system_info'

# === test_scx_boot_usb
setenv test1_scx_boot_usb 'echo "Hello Test1_SCX_BOOT_USB..."; run inc_test_loop_save; run test_info; run scx_boot_usb'
setenv test2_scx_boot_usb 'echo "Hello Test2_SCX_BOOT_USB..."; run inc_test_loop_save; run test_info; run switch_init; run test-ping; run scx_boot_usb'

# === test_boot_usb
setenv test1_boot_usb 'echo "TEST1_BOOT_USB..."; run inc_test_loop_save; run test_info; run boot_usb'
setenv test2_boot_usb 'echo "TEST2_BOOT_USB..."; run inc_test_loop_save; run test_info; run switch_init; run test-ping; run boot_usb'

# how to setup a warm reboot test 
# from console the test machine, ususally in "gnu screen"  
# > run init_test_loop
# > setenv bootcmd 'run test2_boot_usb'
# > saveenv
# > run bootcmd
# wait until linux booted to shell prompt, with "login" prompt
# enter "root" as user name
# from shell prompt: 
# > /diag/startup-test/init-test-autoexec.sh
# switch to shell "GNU screen" root directory, for example in "/test/castle-peak/usb2" 
# make sure "GNU screen" log file is turn on, init log file "screenlog.0" to blank 
# > rm  screenlog.0
# switch back to console of test machine, say "gnu screen/usb2"
# > reboot

# how to check reboot test is ok 
# we want to check that u-boot "test_loop" counter macthed linux "TEST LOOP" counter
#> cat screenlog.0|tr-ascii | grep "###"
# we can easily find in log file "screenlog.0" because u-boot/linux loop counters messages has been prefixed with "###"
#> cat screenlog.0|tr-ascii | grep "###"
### test_loop=1; test_loop_end=1000000 ###
# INFO: ### TEST LOOP: 1 =0x1, System will reboot NOW ###
# test_loop=2; test_loop_end=1000000 ###
# INFO: ### TEST LOOP: 2 =0x2, System will reboot NOW ###
### test_loop=3; test_loop_end=1000000 ###
# INFO: ### TEST LOOP: 3 =0x3, System will reboot NOW ###
### test_loop=4; test_loop_end=1000000 ###
#INFO: ### TEST LOOP: 4 =0x4, System will reboot NOW ###
### test_loop=5; test_loop_end=1000000 ###
# INFO: ### TEST LOOP: 5 =0x5, System will reboot NOW ###
### test_loop=6; test_loop_end=1000000 ###


# === usb_read, test_usb_read
setenv usb_test_name "${fitname}"
setenv usb_test_dev "${usb_boot_dev}"
# IF_board_name MountRitter setenv usb_test_name '1.h2w'
# IF_board_name MountRitter setenv usb_test_dev 4
setenv usb_read 'echo usb_read usb_test_dev=${usb_test_dev}...; fatload usb ${usb_test_dev} ${loadaddr} ${usb_test_name}; setenv test_status $?'
setenv usb_start_read 'usb stop; sleep 3; usb start; run usb_read'
setenv test_usb_read       'usb start; run init_test_loop; echo "usb read, loop: from test_loop=0x${test_loop} to 0x${test_loop_end}..."; while itest.l ${test_loop} -lt ${test_loop_end}; do; echo test_loop=0x${test_loop}; run usb_read      ; if itest ${test_status} -ne 0; then echo "ERROR: Test Failed at test_loop=0x${test_loop}! status=${test_status}"; setenv test_loop ${test_loop_end}; fi; run inc_test_loop; done'
setenv test_usb_start_read 'run init_test_loop; echo "usb read, loop: from test_loop=0x${test_loop} to 0x${test_loop_end}..."; while itest.l ${test_loop} -lt ${test_loop_end}; do; echo test_loop=0x${test_loop}; run usb_start_read; if itest ${test_status} -ne 0; then echo "ERROR: Test Failed at test_loop=0x${test_loop}! status=${test_status}"; setenv test_loop ${test_loop_end}; fi; run inc_test_loop; done'


# === usb_start_read
# === run test_usb_start_read

# === bootcmd 
# setenv bootcmd 'run test1_scx_boot_usb'
setenv bootcmd 'run test2_scx_boot_usb'
# setenv bootcmd 'run test1_boot_usb'
# setenv bootcmd 'run test2_boot_usb'

run init_network
#@ SHELL_host_cmd sleep 10
run init_test_loop 
saveenv

